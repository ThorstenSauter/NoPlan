name: Build image and deploy to Azure Container Apps

on:
  push:
    branches:
      [ main ]
    paths:
      - 'src/**'
      - '.github/workflows/deploy.yml'

  workflow_dispatch:

permissions:
  id-token: write
  contents: read

env:
  APP_NAME: aca-noplan-dev-001
  RESOURCE_GROUP: rg-noplan-dev-001
  IMAGE_NAME: noplan-api
  REGISTRY_URI: crnoplandev001.azurecr.io

jobs:
  build:
    name: Build the container image
    runs-on: ubuntu-latest
    steps:
      - name: Checkout the main branch
        uses: actions/checkout@v3
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1
      - name: Login to Azure
        uses: azure/login@v1
        with:
          client-id: ${{ secrets.AZURE_CLIENT_ID }}
          tenant-id: ${{ secrets.AZURE_TENANT_ID }}
          subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
      - name: Login to Azure Container Registry
        run: |
          set -euo pipefail
          access_token=$(az account get-access-token --query accessToken -o tsv)
          refresh_token=$(curl https://$REGISTRY_URI/oauth2/exchange -v -d "grant_type=access_token&service=$REGISTRY_URI&access_token=$access_token" | jq -r .refresh_token)
          docker login -u 00000000-0000-0000-0000-000000000000 --password-stdin $REGISTRY_URI <<< "$refresh_token"
      - name: Build and push image to registry
        uses: docker/build-push-action@v2
        with:
          push: true
          tags: ${{ env.REGISTRY_URI }}/${{ env.IMAGE_NAME }}:${{ github.sha }}
          file: ./src/NoPlan.Api/Dockerfile
          context: .

  deploy:
    name: Deploy to Azure Container Apps
    runs-on: ubuntu-latest
    needs: build
    steps:
      - name: Login to Azure
        uses: azure/login@v1
        with:
          client-id: ${{ secrets.AZURE_CLIENT_ID }}
          tenant-id: ${{ secrets.AZURE_TENANT_ID }}
          subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
      - name: Update image tag in Azure Container Apps
        uses: azure/CLI@v1
        with:
          inlineScript: |
            az config set extension.use_dynamic_install=yes_without_prompt
            az containerapp update -n ${{ env.APP_NAME }} -g ${{ env.RESOURCE_GROUP }} --image ${{ env.REGISTRY_URI }}/${{ env.IMAGE_NAME }}:${{ github.sha }}
