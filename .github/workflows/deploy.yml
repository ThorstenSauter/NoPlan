name: Build image, Terraform apply and deploy to Azure Container Apps

on:
  push:
    branches:
      - main
    paths:
      - 'src/**'
      - 'infra/**'

  workflow_dispatch:

permissions:
  contents: read
  id-token: write
  security-events: write

env:
  APP_NAME: aca-noplan-dev-001
  DOCKER_FILE: src/NoPlan.Api/Dockerfile
  IMAGE_NAME: crnoplandev001.azurecr.io/noplan-api:github-${{ github.run_number }}
  REGISTRY_NAME: crnoplandev001
  RESOURCE_GROUP: rg-noplan-dev-001

jobs:
  build:
    name: Build the container image
    runs-on: ubuntu-latest
    steps:
      - name: Checkout the main branch
        uses: actions/checkout@v3
      - name: Login to Azure
        uses: azure/login@v1
        with:
          client-id: ${{ secrets.AZURE_CLIENT_ID }}
          tenant-id: ${{ secrets.AZURE_TENANT_ID }}
          subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
      - name: Login to Azure Container Registry
        run: az acr login --name ${{ env.REGISTRY_NAME }}
      - name: Build image
        run: docker build -t ${{ env.IMAGE_NAME }} -f ${{ env.DOCKER_FILE }} .
      - name: Run Snyk Vulnerability Scan
        uses: snyk/actions/docker@master
        continue-on-error: true
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_API_TOKEN }}
        with:
          image: ${{ env.IMAGE_NAME }}
          args: --file=${{ env.DOCKER_FILE }} --severity-threshold=high
      - name: Upload result to GitHub Code Scanning
        uses: github/codeql-action/upload-sarif@v2
        with:
          sarif_file: snyk.sarif
      - name: Push image to registry
        run: docker push ${{ env.IMAGE_NAME }}

  apply:
    name: Run Terraform Apply
    runs-on: ubuntu-latest
    env:
      ARM_CLIENT_ID: ${{ secrets.AZURE_CLIENT_ID }}
      ARM_SUBSCRIPTION_ID: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
      ARM_TENANT_ID: ${{ secrets.AZURE_TENANT_ID }}
      ARM_USE_OIDC: true
      TF_CONTAINER_NAME: "tfstate"
      TF_RESOURCE_GROUP_NAME: "rg-terraforn-state-dev-001"
      TF_STATE_FILE_NAME: "terraform.tfstate"
      TF_STORAGE_ACCOUNT_NAME: "tfstatenoplandev"
      TF_USE_AZUREAD_AUTH: true
      TF_USE_OIDC: true
      TF_VAR_default-connectionstring: ${{ secrets.TF_VAR_DEFAULT_CONNECTIONSTRING }}
      TF_VAR_userauth-client-secret: ${{ secrets.TF_VAR_USERAUTH_CLIENT_SECRET }}
      TF_VAR_userauth-password: ${{ secrets.TF_VAR_USERAUTH_PASSWORD }}
      TF_VAR_userauth-username: ${{ secrets.TF_VAR_USERAUTH_USERNAME }}
    defaults:
      run:
        working-directory: ./infra
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3
      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2
      - name: Terraform Init
        id: init
        run: |
          terraform init \
          -backend-config="resource_group_name=${{ env.TF_RESOURCE_GROUP_NAME }}" \
          -backend-config="storage_account_name=${{ env.TF_STORAGE_ACCOUNT_NAME }}" \
          -backend-config="container_name=${{ env.TF_CONTAINER_NAME }}" \
          -backend-config="key=${{ env.TF_STATE_FILE_NAME }}" \
          -backend-config="use_azuread_auth=${{ env.TF_USE_AZUREAD_AUTH }}" \
          -backend-config="use_oidc=${{ env.TF_USE_OIDC }}" \
          -backend-config="subscription_id=${{ env.ARM_SUBSCRIPTION_ID }}" \
          -backend-config="tenant_id=${{ env.ARM_TENANT_ID }}"
      - name: Terraform Apply
        id: apply
        run: terraform apply -auto-approve -input=false

  deploy:
    name: Deploy to Azure Container Apps
    runs-on: ubuntu-latest
    needs: [ build, apply ]
    steps:
      - name: Login to Azure
        uses: azure/login@v1
        with:
          client-id: ${{ secrets.AZURE_CLIENT_ID }}
          tenant-id: ${{ secrets.AZURE_TENANT_ID }}
          subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
      - name: Update image tag in Azure Container Apps
        uses: azure/CLI@v1
        with:
          inlineScript: |
            az config set extension.use_dynamic_install=yes_without_prompt
            az containerapp update -n ${{ env.APP_NAME }} -g ${{ env.RESOURCE_GROUP }} --image ${{ env.IMAGE_NAME }}
