name: Build, run tests and Terraform plan

on:
  pull_request:
    branches:
      - main

concurrency:
  group: ${{ github.head_ref }}
  cancel-in-progress: true

permissions:
  contents: read
  id-token: write
  pull-requests: write

jobs:
  build:
    name: Build project and run tests
    runs-on: ubuntu-latest
    env:
      CONFIGURATION: Release
      IntegrationTest__KeyVaultUri: ${{ secrets.KEY_VAULT_URI }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3
      - name: Login to Azure
        uses: azure/login@v1
        with:
          client-id: ${{ secrets.AZURE_CLIENT_ID }}
          tenant-id: ${{ secrets.AZURE_TENANT_ID }}
          subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
      - name: Setup .NET
        uses: actions/setup-dotnet@v2
        with:
          dotnet-version: 7.0.x
          include-prerelease: true
      - name: Restore dependencies
        run: dotnet restore
      - name: Build
        run: dotnet build -c ${{ env.CONFIGURATION }} --no-restore
      - name: Test
        run: dotnet test -c ${{ env.CONFIGURATION }} --no-build --verbosity normal

  plan:
    name: Run Terraform Validate and Plan
    runs-on: ubuntu-latest
    env:
      ARM_CLIENT_ID: ${{ secrets.AZURE_CLIENT_ID }}
      ARM_SUBSCRIPTION_ID: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
      ARM_TENANT_ID: ${{ secrets.AZURE_TENANT_ID }}
      TF_CONTAINER_NAME: "tfstate"
      TF_RESOURCE_GROUP_NAME: "rg-terraforn-state-dev-001"
      TF_STATE_FILE_NAME: "terraform.tfstate"
      TF_STORAGE_ACCOUNT_NAME: "tfstatenoplandev"
      TF_USE_AZUREAD_AUTH: true
      TF_USE_OIDC: true
      TF_VAR_default-connectionstring: ${{ secrets.TF_VAR_DEFAULT_CONNECTIONSTRING }}
      TF_VAR_userauth-client-secret: ${{ secrets.TF_VAR_USERAUTH_CLIENT_SECRET }}
      TF_VAR_userauth-password: ${{ secrets.TF_VAR_USERAUTH_PASSWORD }}
      TF_VAR_userauth-username: ${{ secrets.TF_VAR_USERAUTH_USERNAME }}
    defaults:
      run:
        working-directory: ./infra
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3
      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2
      - name: Terraform formatting check
        id: fmt
        continue-on-error: true
        run: terraform fmt -check
      - name: Terraform Init
        id: init
        run: |
          terraform init \
          -backend-config="resource_group_name=${{ env.TF_RESOURCE_GROUP_NAME }}" \
          -backend-config="storage_account_name=${{ env.TF_STORAGE_ACCOUNT_NAME }}" \
          -backend-config="container_name=${{ env.TF_CONTAINER_NAME }}" \
          -backend-config="key=${{ env.TF_STATE_FILE_NAME }}" \
          -backend-config="use_azuread_auth=${{ env.TF_USE_AZUREAD_AUTH }}" \
          -backend-config="use_oidc=${{ env.TF_USE_OIDC }}" \
          -backend-config="subscription_id=${{ env.ARM_SUBSCRIPTION_ID }}" \
          -backend-config="tenant_id=${{ env.ARM_TENANT_ID }}"
      - name: Setup TFLint
        uses: terraform-linters/setup-tflint@v2
        continue-on-error: true
        with:
          tflint_version: latest
          github_token: ${{ secrets.GITHUB_TOKEN }}
      - name: Init TFLint
        run: tflint --init
      - name: Run TFLint
        id: tflint
        continue-on-error: true
        run: tflint --no-color -f compact
      - name: Run tfsec
        uses: aquasecurity/tfsec-pr-commenter-action@v1.2.0
        with:
          working_directory: ./infra
          tfsec_args: --no-color
          github_token: ${{ secrets.GITHUB_TOKEN }}
      - name: Terraform Validate
        id: validate
        continue-on-error: true
        run: terraform validate -no-color
      - name: Terraform Plan
        id: plan
        continue-on-error: true
        run: terraform plan -no-color
      - name: Create or update PR comment
        uses: actions/github-script@v6
        if: github.event_name == 'pull_request'
        env:
          PLAN: "terraform\n${{ steps.plan.outputs.stdout }}"
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const { data: comments } = await github.rest.issues.listComments({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
            })
            const botComment = comments.find(comment => {
              return comment.user.type === 'Bot' && comment.body.includes('Terraform Format and Style')
            })

            const output = `#### Terraform Format and Style 🖌\`${{ steps.fmt.outcome }}\`
            #### Terraform Initialization ⚙️\`${{ steps.init.outcome }}\`
            #### Terraform Plan 📖\`${{ steps.plan.outcome }}\`
            #### Terraform Validation 🤖\`${{ steps.validate.outcome }}\`
            #### TFLint 👓\`${{ steps.tflint.outcome }}\`

            <details><summary>Show Plan</summary>

            \`\`\`\n
            ${process.env.PLAN}
            \`\`\`

            </details>

                  *Pushed by: @${{ github.actor }}, Action: \`${{ github.event_name }}\`*`;

            if (botComment) {
              github.rest.issues.updateComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                comment_id: botComment.id,
                body: output
              })
            } else {
              github.rest.issues.createComment({
                issue_number: context.issue.number,
                owner: context.repo.owner,
                repo: context.repo.repo,
                body: output
              })
            }
      - name: Terraform Plan Status
        if: steps.plan.outcome == 'failure' || steps.tflint.outcome == 'failure'
        run: exit 1
