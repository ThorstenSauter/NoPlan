name: Build, run tests and validate infrastructure

on:
  pull_request:
    branches:
      - main

concurrency:
  group: ${{ github.head_ref }}
  cancel-in-progress: true

permissions:
  contents: read
  pull-requests: write

env:
  TF_CLOUD_ORGANIZATION: ${{ secrets.TF_CLOUD_ORGANIZATION }}

jobs:
  build:
    name: Build project and run tests
    runs-on: ubuntu-latest
    env:
      CONFIGURATION: Release
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3
      - name: Setup .NET
        uses: actions/setup-dotnet@v3
        with:
          dotnet-version: 7.0.x
          dotnet-quality: preview
      - name: Restore dependencies
        run: dotnet restore
      - name: Build
        run: dotnet build -c ${{ env.CONFIGURATION }} --no-restore
      - name: Test
        run: dotnet test -c ${{ env.CONFIGURATION }} --no-build --verbosity normal

  validate:
    name: Validate Terraform configuration
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./infra
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3
      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2
      - name: Terraform formatting check
        id: fmt
        continue-on-error: true
        run: terraform fmt -check -recursive
      - name: Setup TFLint
        uses: terraform-linters/setup-tflint@v2
        continue-on-error: true
        with:
          tflint_version: latest
          github_token: ${{ secrets.GITHUB_TOKEN }}
      - name: Init TFLint
        run: tflint --init
      - name: Run TFLint
        id: tflint
        continue-on-error: true
        run: tflint --no-color -f compact
      - name: Run tfsec
        uses: aquasecurity/tfsec-pr-commenter-action@v1.2.0
        with:
          working_directory: ./infra
          tfsec_args: --no-color
          github_token: ${{ secrets.GITHUB_TOKEN }}
      - name: Terraform Validate
        id: validate
        continue-on-error: true
        run: terraform validate -no-color
      - name: Create or update PR comment
        uses: actions/github-script@v6
        if: github.event_name == 'pull_request'
        env:
          PLAN: "terraform\n${{ steps.plan.outputs.stdout }}"
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const { data: comments } = await github.rest.issues.listComments({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
            })
            const botComment = comments.find(comment => {
              return comment.user.type === 'Bot' && comment.body.includes('Terraform validation')
            })
            const output = `### Terraform validation
            #### Terraform format ðŸ–Œ\`${{ steps.fmt.outcome }}\`
            #### Terraform Validation ðŸ¤–\`${{ steps.validate.outcome }}\`
            #### TFLint ðŸ‘“\`${{ steps.tflint.outcome }}\``;
            if (botComment) {
              github.rest.issues.updateComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                comment_id: botComment.id,
                body: output
              })
            } else {
              github.rest.issues.createComment({
                issue_number: context.issue.number,
                owner: context.repo.owner,
                repo: context.repo.repo,
                body: output
              })
            }
      - name: Validation status
        if: steps.validate.outcome == 'failure' || steps.tflint.outcome == 'failure'
        run: exit 1

  plan-staging:
    name: Plan staging environment
    runs-on: ubuntu-latest
    environment: staging
    env:
      TF_WORKSPACE: ${{ secrets.TF_WORKSPACE }}
    defaults:
      run:
        working-directory: ./infra/staging
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3
      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          cli_config_credentials_token: ${{ secrets.TF_API_TOKEN }}
      - name: Terraform init
        id: init
        run: terraform init
      - name: Terraform plan
        id: plan
        continue-on-error: true
        run: terraform plan -no-color
      - name: Create or update PR comment
        uses: actions/github-script@v6
        if: github.event_name == 'pull_request'
        env:
          PLAN: "terraform\n${{ steps.plan.outputs.stdout }}"
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const { data: comments } = await github.rest.issues.listComments({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
            })
            const botComment = comments.find(comment => {
              return comment.user.type === 'Bot' && comment.body.includes('Staging environment')
            })
            const output = `### Staging environment
            #### Terraform Plan ðŸ“–\`${{ steps.plan.outcome }}\`
            <details><summary>Show Plan</summary>
            \`\`\`\n
            ${process.env.PLAN}
            \`\`\`
            </details>`;
            if (botComment) {
              github.rest.issues.updateComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                comment_id: botComment.id,
                body: output
              })
            } else {
              github.rest.issues.createComment({
                issue_number: context.issue.number,
                owner: context.repo.owner,
                repo: context.repo.repo,
                body: output
              })
            }
      - name: Terraform plan status
        if: steps.plan.outcome == 'failure'
        run: exit 1

    plan-production:
      name: Plan production environment
      runs-on: ubuntu-latest
      environment: production
      env:
        TF_WORKSPACE: ${{ secrets.TF_WORKSPACE }}
      defaults:
        run:
          working-directory: ./infra/prod
      steps:
        - name: Checkout repository
          uses: actions/checkout@v3
        - name: Setup Terraform
          uses: hashicorp/setup-terraform@v2
          with:
            cli_config_credentials_token: ${{ secrets.TF_API_TOKEN }}
        - name: Terraform init
          id: init
          run: terraform init
        - name: Terraform plan
          id: plan
          continue-on-error: true
          run: terraform plan -no-color
        - name: Create or update PR comment
          uses: actions/github-script@v6
          if: github.event_name == 'pull_request'
          env:
            PLAN: "terraform\n${{ steps.plan.outputs.stdout }}"
          with:
            github-token: ${{ secrets.GITHUB_TOKEN }}
            script: |
              const { data: comments } = await github.rest.issues.listComments({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: context.issue.number,
              })
              const botComment = comments.find(comment => {
                return comment.user.type === 'Bot' && comment.body.includes('Production environment')
              })
              const output = `### Production environment
              #### Terraform Plan ðŸ“–\`${{ steps.plan.outcome }}\`
              <details><summary>Show Plan</summary>
              \`\`\`\n
              ${process.env.PLAN}
              \`\`\`
              </details>`;
              if (botComment) {
                github.rest.issues.updateComment({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  comment_id: botComment.id,
                  body: output
                })
              } else {
                github.rest.issues.createComment({
                  issue_number: context.issue.number,
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  body: output
                })
              }
        - name: Terraform plan status
          if: steps.plan.outcome == 'failure'
          run: exit 1

    plan-global:
      name: Plan global environment
      runs-on: ubuntu-latest
      environment: global
      env:
        TF_WORKSPACE: ${{ secrets.TF_WORKSPACE }}
      defaults:
        run:
          working-directory: ./infra/global
      steps:
        - name: Checkout repository
          uses: actions/checkout@v3
        - name: Setup Terraform
          uses: hashicorp/setup-terraform@v2
          with:
            cli_config_credentials_token: ${{ secrets.TF_API_TOKEN }}
        - name: Terraform init
          id: init
          run: terraform init
        - name: Terraform Plan
          id: plan
          continue-on-error: true
          run: terraform plan -no-color
        - name: Terraform plan
          id: plan-prod
          continue-on-error: true
          working-directory: ./infra/prod
          run: terraform plan -no-color
        - name: Create or update PR comment
          uses: actions/github-script@v6
          if: github.event_name == 'pull_request'
          env:
            PLAN: "terraform\n${{ steps.plan.outputs.stdout }}"
          with:
            github-token: ${{ secrets.GITHUB_TOKEN }}
            script: |
              const { data: comments } = await github.rest.issues.listComments({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: context.issue.number,
              })
              const botComment = comments.find(comment => {
                return comment.user.type === 'Bot' && comment.body.includes('Global environment')
              })
              const output = `### Global environment
              #### Terraform Plan ðŸ“–\`${{ steps.plan.outcome }}\`
              <details><summary>Show Plan</summary>
              \`\`\`\n
              ${process.env.PLAN}
              \`\`\`
              </details>`;
              if (botComment) {
                github.rest.issues.updateComment({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  comment_id: botComment.id,
                  body: output
                })
              } else {
                github.rest.issues.createComment({
                  issue_number: context.issue.number,
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  body: output
                })
              }
        - name: Terraform plan status
          if: steps.plan.outcome == 'failure'
          run: exit 1
